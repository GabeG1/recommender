{"ast":null,"code":"const CLIENT_ID = '0257e913a3d44ce9b0535e868949fd21';\nconst URL = \"https://accounts.spotify.com/api/token\";\nconst CORS = \"https://cors-anywhere.herokuapp.com/\";\nconst cs = '96a0cfebacfa4ad3a5757db18d09fac1';\nvar encodedData = window.btoa(CLIENT_ID + ':' + cs);\nconst searchUrl = \"https://api.spotify.com/v1/search\";\nconst Songs = {\n  searchSongs: async function (query) {\n    let response = await fetch(`${URL}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${encodedData}`,\n        'Content-Type': \"application/x-www-form-urlencoded\"\n      },\n      body: 'grant_type=client_credentials'\n    });\n    let jsonResponse = await response.json();\n    const token = jsonResponse.access_token;\n    console.log(token);\n\n    if (!token) {\n      return [];\n    }\n\n    query.replace(/\\s/g, \"%20\");\n    console.log(`${searchUrl}?q=${query}&type=track`);\n    response = await fetch(`${searchUrl}?q=${query}&type=track`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    console.log(response);\n    jsonResponse = await response.json();\n    console.log(jsonResponse);\n\n    if (!jsonResponse) {\n      return [];\n    }\n\n    return jsonResponse.tracks.items.map(track => {\n      return {\n        id: track.id,\n        album: track.album.name,\n        title: track.name,\n        image: track.album.images[1].url,\n        artist: track.artists[0].name,\n        releaseDate: track.album.release_date\n      };\n    });\n  }\n};\nexport default Songs;","map":{"version":3,"sources":["C:/Users/burlea/Personal Projects/recommender/FrontEnd/src/Util/SongFinder.js"],"names":["CLIENT_ID","URL","CORS","cs","encodedData","window","btoa","searchUrl","Songs","searchSongs","query","response","fetch","method","headers","body","jsonResponse","json","token","access_token","console","log","replace","tracks","items","map","track","id","album","name","title","image","images","url","artist","artists","releaseDate","release_date"],"mappings":"AAAA,MAAMA,SAAS,GAAG,kCAAlB;AACA,MAAMC,GAAG,GAAG,wCAAZ;AACA,MAAMC,IAAI,GAAG,sCAAb;AACA,MAAMC,EAAE,GAAG,kCAAX;AACA,IAAIC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYN,SAAS,GAAG,GAAZ,GAAkBG,EAA9B,CAAlB;AACA,MAAMI,SAAS,GAAC,mCAAhB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,WAAW,EAAE,gBAAgBC,KAAhB,EAAuB;AAEpC,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,GAAI,EAAR,EAAW;AACjCY,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACT,yBAAkB,SAAQV,WAAY,EAD7B;AAET,wBAAgB;AAFP,OAFwB;AAMjCW,MAAAA,IAAI,EAAE;AAN2B,KAAX,CAA1B;AASA,QAAIC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAzB;AACA,UAAMC,KAAK,GAAGF,YAAY,CAACG,YAA3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,QAAG,CAACA,KAAJ,EAAW;AACP,aAAO,EAAP;AACH;;AACDR,IAAAA,KAAK,CAACY,OAAN,CAAc,KAAd,EAAqB,KAArB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEd,SAAU,MAAKG,KAAM,aAApC;AACAC,IAAAA,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,SAAU,MAAKG,KAAM,aAAzB,EAAuC;AACzDI,MAAAA,OAAO,EAAE;AACT,yBAAkB,UAASI,KAAM;AADxB;AADgD,KAAvC,CAAtB;AAKAE,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAK,IAAAA,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;;AACA,QAAG,CAACA,YAAJ,EAAkB;AACd,aAAO,EAAP;AACH;;AACD,WACIA,YAAY,CAACO,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,IAAG;AACrC,aAAO;AACRC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADF;AAERC,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYC,IAFX;AAGRC,QAAAA,KAAK,EAAEJ,KAAK,CAACG,IAHL;AAIRE,QAAAA,KAAK,EAAEL,KAAK,CAACE,KAAN,CAAYI,MAAZ,CAAmB,CAAnB,EAAsBC,GAJrB;AAKRC,QAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd,EAAiBN,IALjB;AAMRO,QAAAA,WAAW,EAAEV,KAAK,CAACE,KAAN,CAAYS;AANjB,OAAP;AASA,KAVD,CADJ;AAeC;AA9CS,CAAd;AAiDA,eAAe7B,KAAf","sourcesContent":["const CLIENT_ID = '0257e913a3d44ce9b0535e868949fd21';\r\nconst URL = \"https://accounts.spotify.com/api/token\";\r\nconst CORS = \"https://cors-anywhere.herokuapp.com/\";\r\nconst cs = '96a0cfebacfa4ad3a5757db18d09fac1'\r\nvar encodedData = window.btoa(CLIENT_ID + ':' + cs);\r\nconst searchUrl=\"https://api.spotify.com/v1/search\";\r\n\r\nconst Songs = {\r\n    searchSongs: async function (query) {\r\n\r\n    let response = await fetch(`${URL}`, {\r\n        method: 'POST',\r\n        headers: {\r\n        'Authorization': `Basic ${encodedData}`,\r\n        'Content-Type': \"application/x-www-form-urlencoded\",\r\n        },\r\n        body: 'grant_type=client_credentials'\r\n    } \r\n    );\r\n    let jsonResponse = await response.json();\r\n    const token = jsonResponse.access_token;\r\n    console.log(token);\r\n    if(!token) {\r\n        return [];\r\n    }\r\n    query.replace(/\\s/g, \"%20\");\r\n    console.log(`${searchUrl}?q=${query}&type=track`);\r\n    response = await fetch(`${searchUrl}?q=${query}&type=track`, {\r\n        headers: {\r\n        'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n    console.log(response);\r\n    jsonResponse = await response.json();\r\n    console.log(jsonResponse);\r\n    if(!jsonResponse) {\r\n        return [];\r\n    }\r\n    return (\r\n        jsonResponse.tracks.items.map(track=> {\r\n         return {\r\n        id: track.id,\r\n        album: track.album.name,\r\n        title: track.name,\r\n        image: track.album.images[1].url,\r\n        artist: track.artists[0].name,\r\n        releaseDate: track.album.release_date\r\n         }\r\n\r\n        })\r\n    )\r\n    \r\n\r\n    }\r\n}\r\n\r\nexport default Songs;"]},"metadata":{},"sourceType":"module"}